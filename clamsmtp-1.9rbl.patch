*** clamsmtp-1.9.org/configure.in	2007-05-27 03:01:56.000000000 +0300
--- clamsmtp-1.9.new/configure.in	2008-05-01 03:24:23.000000000 +0300
***************
*** 125,128 ****
--- 125,130 ----
  fi
  
+ AC_CHECK_LIB(resolv,__res_query,[LIBS="${LIBS} -lresolv"],[echo "resolver library not found"; exit 1])
+ 
  # Have to resolve this for the path below
  if test "${prefix}" = "NONE"; then
*** clamsmtp-1.9.org/configure	2007-05-28 22:15:38.000000000 +0300
--- clamsmtp-1.9.new/configure	2008-05-01 03:29:35.000000000 +0300
***************
*** 6039,6042 ****
--- 6039,6110 ----
  fi
  
+ { echo "$as_me:$LINENO: checking for __res_query in -lresolv" >&5
+ echo $ECHO_N "checking for __res_query in -lresolv... $ECHO_C" >&6; }
+ if test "${ac_cv_lib_resolv___res_query+set}" = set; then
+   echo $ECHO_N "(cached) $ECHO_C" >&6
+ else
+   ac_check_lib_save_LIBS=$LIBS
+ LIBS="-lresolv  $LIBS"
+ cat >conftest.$ac_ext <<_ACEOF
+ /* confdefs.h.  */
+ _ACEOF
+ cat confdefs.h >>conftest.$ac_ext
+ cat >>conftest.$ac_ext <<_ACEOF
+ /* end confdefs.h.  */
+ 
+ /* Override any GCC internal prototype to avoid an error.
+    Use char because int might match the return type of a GCC
+    builtin and then its argument prototype would still apply.  */
+ #ifdef __cplusplus
+ extern "C"
+ #endif
+ char __res_query ();
+ int
+ main ()
+ {
+ return __res_query ();
+   ;
+   return 0;
+ }
+ _ACEOF
+ rm -f conftest.$ac_objext conftest$ac_exeext
+ if { (ac_try="$ac_link"
+ case "(($ac_try" in
+   *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+   *) ac_try_echo=$ac_try;;
+ esac
+ eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
+   (eval "$ac_link") 2>conftest.er1
+   ac_status=$?
+   grep -v '^ *+' conftest.er1 >conftest.err
+   rm -f conftest.er1
+   cat conftest.err >&5
+   echo "$as_me:$LINENO: \$? = $ac_status" >&5
+   (exit $ac_status); } && {
+ 	 test -z "$ac_c_werror_flag" ||
+ 	 test ! -s conftest.err
+        } && test -s conftest$ac_exeext &&
+        $as_test_x conftest$ac_exeext; then
+   ac_cv_lib_resolv___res_query=yes
+ else
+   echo "$as_me: failed program was:" >&5
+ sed 's/^/| /' conftest.$ac_ext >&5
+ 
+ 	ac_cv_lib_resolv___res_query=no
+ fi
+ 
+ rm -f core conftest.err conftest.$ac_objext conftest_ipa8_conftest.oo \
+       conftest$ac_exeext conftest.$ac_ext
+ LIBS=$ac_check_lib_save_LIBS
+ fi
+ { echo "$as_me:$LINENO: result: $ac_cv_lib_resolv___res_query" >&5
+ echo "${ECHO_T}$ac_cv_lib_resolv___res_query" >&6; }
+ if test $ac_cv_lib_resolv___res_query = yes; then
+   LIBS="${LIBS} -lresolv"
+ else
+   echo "resolver library not found"; exit 1
+ fi
+ 
+ 
  # Have to resolve this for the path below
  if test "${prefix}" = "NONE"; then
*** clamsmtp-1.9.org/common/sppriv.h	2007-05-27 03:00:02.000000000 +0300
--- clamsmtp-1.9.new/common/sppriv.h	2008-05-01 03:07:31.000000000 +0300
***************
*** 66,69 ****
--- 66,71 ----
      int daemonized;                 /* Whether process is daemonized or not */
  
+     const char* rblserver;
+ 
      /* Internal Use ------------------------- */
      char* _p;
*** clamsmtp-1.9.org/common/smtppass.c	2007-05-27 03:00:18.000000000 +0300
--- clamsmtp-1.9.new/common/smtppass.c	2008-05-01 03:31:53.000000000 +0300
***************
*** 70,73 ****
--- 70,82 ----
  #include "sppriv.h"
  
+ #include <string.h>
+ #include <netinet/in.h>
+ #include <arpa/nameser.h>
+ #include <resolv.h>
+ #include <netdb.h>
+ #include <stdlib.h>
+ 
+ #define RBL_MSG "554 You are in blacklist. Connection Rejected" CRLF
+ 
  /* -----------------------------------------------------------------------
   *  STRUCTURES
***************
*** 118,121 ****
--- 127,131 ----
  #define EHLO_CMD            "EHLO"
  #define FROM_CMD            "MAIL FROM"
+ #define AUTH_CMD            "AUTH"
  #define TO_CMD              "RCPT TO"
  #define DATA_CMD            "DATA"
***************
*** 169,172 ****
--- 179,183 ----
  #define CFG_PIDFILE         "PidFile"
  #define CFG_XCLIENT         "XClient"
+ #define CFG_RBL		    "RBL"
  
  /* -----------------------------------------------------------------------
***************
*** 213,216 ****
--- 224,285 ----
   *  BASIC RUN FUNCTIONALITY 
   */
+ int rblcheck( int a, int b, int c, int d, char * rbldomain )
+ {
+ 	char * domain;
+ 	int result = 0;
+ 	u_char fixedans[ PACKETSZ ];
+ 	u_char * answer;
+ 	const u_char * cp;
+ 	u_char * rp;
+ 	const u_char * cend;
+ 	const u_char * rend;
+ 	int len;
+ 
+ 	domain = ( char * )malloc( 17 + strlen( rbldomain ) );
+ 	sprintf( domain, "%d.%d.%d.%d.%s", d, c, b, a, rbldomain );
+ 
+ 	res_init();
+ 	answer = fixedans;
+ 	len = res_query( domain, C_IN, T_A, answer, PACKETSZ );
+ 
+ 	if( len == -1 ) {
+ 		free(domain);
+ 		return result;
+ 	}
+ 
+ 	if( len > PACKETSZ )
+ 	{
+ 		answer = malloc( len );
+ 		len = res_query( domain, C_IN, T_A, answer, len );
+ 		free(answer);
+ 		if( len == -1 ) {
+ 			free(domain);
+ 			return result;
+ 		}
+ 	}
+ 
+ 	free(domain);
+ 	return(1);
+ 
+ }
+ 
+ int rbl_( char * addr ,char *domain)
+ {
+         int a, b, c, d;
+         int count = 0;
+         int response;
+         struct rbl * ptr;
+ 
+                 if( sscanf( addr, "%d.%d.%d.%d", &a, &b, &c, &d ) != 4
+                   || a < 0 || a > 255 || b < 0 || b > 255 || c < 0 || c > 255
+                   || d < 0 || d > 255 )
+                 {
+                         return(0);
+                 }
+                 response = rblcheck( a, b, c, d,domain );
+ 		if (response) return(1);
+  return(0);
+ }
+ 
  
  void sp_init(const char* name)
***************
*** 833,836 ****
--- 902,906 ----
      int xclient_sup = 0;    /* Is XCLIENT supported? */
      int xclient_sent = 0;   /* Have we sent an XCLIENT command? */
+     int auth_sent = 0;   
          
      ASSERT(spio_valid(&(ctx->client)) &&
***************
*** 893,898 ****
--- 963,977 ----
  
              /* Handle the DATA section via our AV checker */
+             if(is_first_word(C_LINE, AUTH_CMD, KL(AUTH_CMD))) auth_sent = 1;
              if(is_first_word(C_LINE, DATA_CMD, KL(DATA_CMD)))
              {
+ 		if ((!auth_sent) && (g_state.rblserver))
+ 		if (rbl_(ctx->client.peername,g_state.rblserver)) {
+ 	             sp_message(NULL, LOG_INFO, "%s rejected by RBL",ctx->client.peername); 
+                 	if(spio_write_data(ctx, &(ctx->client), RBL_MSG) == -1) 
+ 				RETURN(-1);
+ 			RETURN(-2);
+ 	         }
+ 
                  /* Send back the intermediate response to the client */
                  if(spio_write_data(ctx, &(ctx->client), SMTP_DATAINTERMED) == -1)
***************
*** 1963,1967 ****
          ret = 1;
      }
!  
      else if(strcasecmp(CFG_DIRECTORY, name) == 0)
      {
--- 2042,2054 ----
          ret = 1;
      }
! 
!     else if(strcasecmp(CFG_RBL, name) == 0)
!     {
!         if(strlen(value) == 0)
!             errx(2, "invalid setting: " CFG_RBL);   
!         g_state.rblserver = value;
!         ret = 1;
!     }
! 
      else if(strcasecmp(CFG_DIRECTORY, name) == 0)
      {
